{"ast":null,"code":"import { unstable_nested as nested } from '@mui/private-theming/ThemeProvider';\n/**\n * This is the list of the style rule name we use as drop in replacement for the built-in\n * pseudo classes (:checked, :disabled, :focused, etc.).\n *\n * Why do they exist in the first place?\n * These classes are used at a specificity of 2.\n * It allows them to override previously defined styles as well as\n * being untouched by simple user overrides.\n */\n\nconst stateClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected']; // Returns a function which generates unique class names based on counters.\n// When new generator function is created, rule counter is reset.\n// We need to reset the rule counter for SSR for each request.\n//\n// It's inspired by\n// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js\n\nexport default function createGenerateClassName() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    disableGlobal = false,\n    productionPrefix = 'jss',\n    seed = ''\n  } = options;\n  const seedPrefix = seed === '' ? '' : `${seed}-`;\n  let ruleCounter = 0;\n  const getNextCounterId = () => {\n    ruleCounter += 1;\n    if (process.env.NODE_ENV !== 'production') {\n      if (ruleCounter >= 1e10) {\n        console.warn(['MUI: You might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));\n      }\n    }\n    return ruleCounter;\n  };\n  return (rule, styleSheet) => {\n    const name = styleSheet.options.name; // Is a global static MUI style?\n\n    if (name && name.indexOf('Mui') === 0 && !styleSheet.options.link && !disableGlobal) {\n      // We can use a shorthand class name, we never use the keys to style the components.\n      if (stateClasses.indexOf(rule.key) !== -1) {\n        return `Mui-${rule.key}`;\n      }\n      const prefix = `${seedPrefix}${name}-${rule.key}`;\n      if (!styleSheet.options.theme[nested] || seed !== '') {\n        return prefix;\n      }\n      return `${prefix}-${getNextCounterId()}`;\n    }\n    if (process.env.NODE_ENV === 'production') {\n      return `${seedPrefix}${productionPrefix}${getNextCounterId()}`;\n    }\n    const suffix = `${rule.key}-${getNextCounterId()}`; // Help with debuggability.\n\n    if (styleSheet.options.classNamePrefix) {\n      return `${seedPrefix}${styleSheet.options.classNamePrefix}-${suffix}`;\n    }\n    return `${seedPrefix}${suffix}`;\n  };\n}","map":{"version":3,"names":["unstable_nested","nested","stateClasses","createGenerateClassName","options","disableGlobal","productionPrefix","seed","seedPrefix","ruleCounter","getNextCounterId","process","env","NODE_ENV","console","warn","join","rule","styleSheet","name","indexOf","link","key","prefix","theme","suffix","classNamePrefix"],"sources":["D:/portfolio/node_modules/@mui/styles/createGenerateClassName/createGenerateClassName.js"],"sourcesContent":["import { unstable_nested as nested } from '@mui/private-theming/ThemeProvider';\n/**\n * This is the list of the style rule name we use as drop in replacement for the built-in\n * pseudo classes (:checked, :disabled, :focused, etc.).\n *\n * Why do they exist in the first place?\n * These classes are used at a specificity of 2.\n * It allows them to override previously defined styles as well as\n * being untouched by simple user overrides.\n */\n\nconst stateClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected']; // Returns a function which generates unique class names based on counters.\n// When new generator function is created, rule counter is reset.\n// We need to reset the rule counter for SSR for each request.\n//\n// It's inspired by\n// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js\n\nexport default function createGenerateClassName(options = {}) {\n  const {\n    disableGlobal = false,\n    productionPrefix = 'jss',\n    seed = ''\n  } = options;\n  const seedPrefix = seed === '' ? '' : `${seed}-`;\n  let ruleCounter = 0;\n\n  const getNextCounterId = () => {\n    ruleCounter += 1;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (ruleCounter >= 1e10) {\n        console.warn(['MUI: You might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));\n      }\n    }\n\n    return ruleCounter;\n  };\n\n  return (rule, styleSheet) => {\n    const name = styleSheet.options.name; // Is a global static MUI style?\n\n    if (name && name.indexOf('Mui') === 0 && !styleSheet.options.link && !disableGlobal) {\n      // We can use a shorthand class name, we never use the keys to style the components.\n      if (stateClasses.indexOf(rule.key) !== -1) {\n        return `Mui-${rule.key}`;\n      }\n\n      const prefix = `${seedPrefix}${name}-${rule.key}`;\n\n      if (!styleSheet.options.theme[nested] || seed !== '') {\n        return prefix;\n      }\n\n      return `${prefix}-${getNextCounterId()}`;\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      return `${seedPrefix}${productionPrefix}${getNextCounterId()}`;\n    }\n\n    const suffix = `${rule.key}-${getNextCounterId()}`; // Help with debuggability.\n\n    if (styleSheet.options.classNamePrefix) {\n      return `${seedPrefix}${styleSheet.options.classNamePrefix}-${suffix}`;\n    }\n\n    return `${seedPrefix}${suffix}`;\n  };\n}"],"mappings":"AAAA,SAASA,eAAe,IAAIC,MAAM,QAAQ,oCAAoC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,cAAc,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;AACtH;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,uBAAuB,GAAe;EAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;EAC1D,MAAM;IACJC,aAAa,GAAG,KAAK;IACrBC,gBAAgB,GAAG,KAAK;IACxBC,IAAI,GAAG;EACT,CAAC,GAAGH,OAAO;EACX,MAAMI,UAAU,GAAGD,IAAI,KAAK,EAAE,GAAG,EAAE,GAAI,GAAEA,IAAK,GAAE;EAChD,IAAIE,WAAW,GAAG,CAAC;EAEnB,MAAMC,gBAAgB,GAAG,MAAM;IAC7BD,WAAW,IAAI,CAAC;IAEhB,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,IAAIJ,WAAW,IAAI,IAAI,EAAE;QACvBK,OAAO,CAACC,IAAI,CAAC,CAAC,oCAAoC,EAAE,oDAAoD,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;MACrH;IACF;IAEA,OAAOP,WAAW;EACpB,CAAC;EAED,OAAO,CAACQ,IAAI,EAAEC,UAAU,KAAK;IAC3B,MAAMC,IAAI,GAAGD,UAAU,CAACd,OAAO,CAACe,IAAI,CAAC,CAAC;;IAEtC,IAAIA,IAAI,IAAIA,IAAI,CAACC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAACF,UAAU,CAACd,OAAO,CAACiB,IAAI,IAAI,CAAChB,aAAa,EAAE;MACnF;MACA,IAAIH,YAAY,CAACkB,OAAO,CAACH,IAAI,CAACK,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;QACzC,OAAQ,OAAML,IAAI,CAACK,GAAI,EAAC;MAC1B;MAEA,MAAMC,MAAM,GAAI,GAAEf,UAAW,GAAEW,IAAK,IAAGF,IAAI,CAACK,GAAI,EAAC;MAEjD,IAAI,CAACJ,UAAU,CAACd,OAAO,CAACoB,KAAK,CAACvB,MAAM,CAAC,IAAIM,IAAI,KAAK,EAAE,EAAE;QACpD,OAAOgB,MAAM;MACf;MAEA,OAAQ,GAAEA,MAAO,IAAGb,gBAAgB,EAAG,EAAC;IAC1C;IAEA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,OAAQ,GAAEL,UAAW,GAAEF,gBAAiB,GAAEI,gBAAgB,EAAG,EAAC;IAChE;IAEA,MAAMe,MAAM,GAAI,GAAER,IAAI,CAACK,GAAI,IAAGZ,gBAAgB,EAAG,EAAC,CAAC,CAAC;;IAEpD,IAAIQ,UAAU,CAACd,OAAO,CAACsB,eAAe,EAAE;MACtC,OAAQ,GAAElB,UAAW,GAAEU,UAAU,CAACd,OAAO,CAACsB,eAAgB,IAAGD,MAAO,EAAC;IACvE;IAEA,OAAQ,GAAEjB,UAAW,GAAEiB,MAAO,EAAC;EACjC,CAAC;AACH"},"metadata":{},"sourceType":"module"}