{"ast":null,"code":"import { unstable_nested as nested } from '@mui/private-theming/ThemeProvider';\n/**\n * This is the list of the style rule name we use as drop in replacement for the built-in\n * pseudo classes (:checked, :disabled, :focused, etc.).\n *\n * Why do they exist in the first place?\n * These classes are used at a specificity of 2.\n * It allows them to override previously defined styles as well as\n * being untouched by simple user overrides.\n */\n\nvar stateClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected']; // Returns a function which generates unique class names based on counters.\n// When new generator function is created, rule counter is reset.\n// We need to reset the rule counter for SSR for each request.\n//\n// It's inspired by\n// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js\n\nexport default function createGenerateClassName() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$disableGloba = options.disableGlobal,\n    disableGlobal = _options$disableGloba === void 0 ? false : _options$disableGloba,\n    _options$productionPr = options.productionPrefix,\n    productionPrefix = _options$productionPr === void 0 ? 'jss' : _options$productionPr,\n    _options$seed = options.seed,\n    seed = _options$seed === void 0 ? '' : _options$seed;\n  var seedPrefix = seed === '' ? '' : \"\".concat(seed, \"-\");\n  var ruleCounter = 0;\n  var getNextCounterId = function getNextCounterId() {\n    ruleCounter += 1;\n    if (process.env.NODE_ENV !== 'production') {\n      if (ruleCounter >= 1e10) {\n        console.warn(['MUI: You might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));\n      }\n    }\n    return ruleCounter;\n  };\n  return function (rule, styleSheet) {\n    var name = styleSheet.options.name; // Is a global static MUI style?\n\n    if (name && name.indexOf('Mui') === 0 && !styleSheet.options.link && !disableGlobal) {\n      // We can use a shorthand class name, we never use the keys to style the components.\n      if (stateClasses.indexOf(rule.key) !== -1) {\n        return \"Mui-\".concat(rule.key);\n      }\n      var prefix = \"\".concat(seedPrefix).concat(name, \"-\").concat(rule.key);\n      if (!styleSheet.options.theme[nested] || seed !== '') {\n        return prefix;\n      }\n      return \"\".concat(prefix, \"-\").concat(getNextCounterId());\n    }\n    if (process.env.NODE_ENV === 'production') {\n      return \"\".concat(seedPrefix).concat(productionPrefix).concat(getNextCounterId());\n    }\n    var suffix = \"\".concat(rule.key, \"-\").concat(getNextCounterId()); // Help with debuggability.\n\n    if (styleSheet.options.classNamePrefix) {\n      return \"\".concat(seedPrefix).concat(styleSheet.options.classNamePrefix, \"-\").concat(suffix);\n    }\n    return \"\".concat(seedPrefix).concat(suffix);\n  };\n}","map":{"version":3,"names":["unstable_nested","nested","stateClasses","createGenerateClassName","options","disableGlobal","productionPrefix","seed","seedPrefix","ruleCounter","getNextCounterId","process","env","NODE_ENV","console","warn","join","rule","styleSheet","name","indexOf","link","key","prefix","theme","suffix","classNamePrefix"],"sources":["D:/portfolio/node_modules/@mui/styles/createGenerateClassName/createGenerateClassName.js"],"sourcesContent":["import { unstable_nested as nested } from '@mui/private-theming/ThemeProvider';\n/**\n * This is the list of the style rule name we use as drop in replacement for the built-in\n * pseudo classes (:checked, :disabled, :focused, etc.).\n *\n * Why do they exist in the first place?\n * These classes are used at a specificity of 2.\n * It allows them to override previously defined styles as well as\n * being untouched by simple user overrides.\n */\n\nconst stateClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected']; // Returns a function which generates unique class names based on counters.\n// When new generator function is created, rule counter is reset.\n// We need to reset the rule counter for SSR for each request.\n//\n// It's inspired by\n// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js\n\nexport default function createGenerateClassName(options = {}) {\n  const {\n    disableGlobal = false,\n    productionPrefix = 'jss',\n    seed = ''\n  } = options;\n  const seedPrefix = seed === '' ? '' : `${seed}-`;\n  let ruleCounter = 0;\n\n  const getNextCounterId = () => {\n    ruleCounter += 1;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (ruleCounter >= 1e10) {\n        console.warn(['MUI: You might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));\n      }\n    }\n\n    return ruleCounter;\n  };\n\n  return (rule, styleSheet) => {\n    const name = styleSheet.options.name; // Is a global static MUI style?\n\n    if (name && name.indexOf('Mui') === 0 && !styleSheet.options.link && !disableGlobal) {\n      // We can use a shorthand class name, we never use the keys to style the components.\n      if (stateClasses.indexOf(rule.key) !== -1) {\n        return `Mui-${rule.key}`;\n      }\n\n      const prefix = `${seedPrefix}${name}-${rule.key}`;\n\n      if (!styleSheet.options.theme[nested] || seed !== '') {\n        return prefix;\n      }\n\n      return `${prefix}-${getNextCounterId()}`;\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      return `${seedPrefix}${productionPrefix}${getNextCounterId()}`;\n    }\n\n    const suffix = `${rule.key}-${getNextCounterId()}`; // Help with debuggability.\n\n    if (styleSheet.options.classNamePrefix) {\n      return `${seedPrefix}${styleSheet.options.classNamePrefix}-${suffix}`;\n    }\n\n    return `${seedPrefix}${suffix}`;\n  };\n}"],"mappings":"AAAA,SAASA,eAAe,IAAIC,MAAM,QAAQ,oCAAoC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,YAAY,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,cAAc,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;AACtH;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,uBAAuB,GAAe;EAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;EAC1D,4BAIIA,OAAO,CAHTC,aAAa;IAAbA,aAAa,sCAAG,KAAK;IAAA,wBAGnBD,OAAO,CAFTE,gBAAgB;IAAhBA,gBAAgB,sCAAG,KAAK;IAAA,gBAEtBF,OAAO,CADTG,IAAI;IAAJA,IAAI,8BAAG,EAAE;EAEX,IAAMC,UAAU,GAAGD,IAAI,KAAK,EAAE,GAAG,EAAE,aAAMA,IAAI,MAAG;EAChD,IAAIE,WAAW,GAAG,CAAC;EAEnB,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAS;IAC7BD,WAAW,IAAI,CAAC;IAEhB,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,IAAIJ,WAAW,IAAI,IAAI,EAAE;QACvBK,OAAO,CAACC,IAAI,CAAC,CAAC,oCAAoC,EAAE,oDAAoD,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;MACrH;IACF;IAEA,OAAOP,WAAW;EACpB,CAAC;EAED,OAAO,UAACQ,IAAI,EAAEC,UAAU,EAAK;IAC3B,IAAMC,IAAI,GAAGD,UAAU,CAACd,OAAO,CAACe,IAAI,CAAC,CAAC;;IAEtC,IAAIA,IAAI,IAAIA,IAAI,CAACC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAACF,UAAU,CAACd,OAAO,CAACiB,IAAI,IAAI,CAAChB,aAAa,EAAE;MACnF;MACA,IAAIH,YAAY,CAACkB,OAAO,CAACH,IAAI,CAACK,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;QACzC,qBAAcL,IAAI,CAACK,GAAG;MACxB;MAEA,IAAMC,MAAM,aAAMf,UAAU,SAAGW,IAAI,cAAIF,IAAI,CAACK,GAAG,CAAE;MAEjD,IAAI,CAACJ,UAAU,CAACd,OAAO,CAACoB,KAAK,CAACvB,MAAM,CAAC,IAAIM,IAAI,KAAK,EAAE,EAAE;QACpD,OAAOgB,MAAM;MACf;MAEA,iBAAUA,MAAM,cAAIb,gBAAgB,EAAE;IACxC;IAEA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,iBAAUL,UAAU,SAAGF,gBAAgB,SAAGI,gBAAgB,EAAE;IAC9D;IAEA,IAAMe,MAAM,aAAMR,IAAI,CAACK,GAAG,cAAIZ,gBAAgB,EAAE,CAAE,CAAC,CAAC;;IAEpD,IAAIQ,UAAU,CAACd,OAAO,CAACsB,eAAe,EAAE;MACtC,iBAAUlB,UAAU,SAAGU,UAAU,CAACd,OAAO,CAACsB,eAAe,cAAID,MAAM;IACrE;IAEA,iBAAUjB,UAAU,SAAGiB,MAAM;EAC/B,CAAC;AACH"},"metadata":{},"sourceType":"module"}